[{"D:\\web\\labka8\\src\\index.js":"1","D:\\web\\labka8\\src\\App.jsx":"2"},{"size":205,"mtime":1699993944000,"results":"3","hashOfConfig":"4"},{"size":4534,"mtime":1700405921611,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1snzxa6",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"D:\\web\\labka8\\src\\index.js",[],[],"D:\\web\\labka8\\src\\App.jsx",["13","14"],[],"import { CircularProgress, Slide, TextField } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport React from 'react';\n\nfunction App() {\n  const [cityName, setCityName] = useState(\"Astana\");\n  const [inputText, setInputText] = useState(\"\");\n  const [data, setData] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [isDay, setIsDay] = useState(true);\n  const [bgClass, setBgClass] = useState(\"day-bg\");\n  const [hourlyWeather, setHourlyWeather] = useState([]);\n\n  const handleSearch = (e) => {\n    if (e.key === \"Enter\") {\n      setCityName(e.target.value);\n      setInputText(\"\");\n    }\n  };\n\n  const sliderSettings = {\n    infinite: true,\n    speed: 300,\n    slidesToShow: 5,\n    slidesToScroll: 2,\n  };\n\n  const fetchWeatherData = () => {\n  fetch(\n    `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=189271b827844bff7388350c44848615&units=metric`\n  )\n    .then((res) => {\n      if (res.status === 200) {\n        error && setError(false);\n        return res.json();\n      } else {\n        throw new Error(\"Something went wrong\");\n      }\n    })\n    .then((weatherData) => {\n      setData(weatherData);\n\n      const currentTime = new Date().getTime() / 1000;\n      const sunriseTime = weatherData.sys.sunrise;\n      const sunsetTime = weatherData.sys.sunset;\n      const isDay = currentTime > sunriseTime && currentTime < sunsetTime;\n\n      setIsDay(isDay);\n\n      if (isDay) {\n        setBgClass(\"day-bg\");\n      } else {\n        setBgClass(\"night-bg\");\n      }\n\n      // Fetch forecast data after receiving weather data\n      return fetch(\n        `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=189271b827844bff7388350c44848615&units=metric`\n      );\n    })\n    .then((res) => {\n      if (res.status === 200) {\n        error && setError(false);\n        return res.json();\n      } else {\n        throw new Error(\"Something went wrong\");\n      }\n    })\n    .then((forecastData) => {\n      setHourlyWeather(forecastData.list);\n      setLoading(false);\n    })\n    .catch(() => setError(true));\n};\n\n  useEffect(() => {\n    fetchWeatherData();\n  }, [cityName, error]);\n\n  return (\n    <div className={`bg_img ${bgClass}`}>\n      {!loading ? (\n        <>\n          <div className=\"search-container\">\n            <TextField\n              color=\"\"\n              size=\"small\"\n              variant=\"outlined\"\n              label=\"Search\"\n              className=\"input\"\n              error={error}\n              value={inputText}\n              onChange={(e) => setInputText(e.target.value)}\n              onKeyDown={handleSearch}\n            />\n          </div>\n\n          <h1 className=\"city\">{data.name}</h1>\n\n          <h1 className=\"temp\">{data.main.temp.toFixed()} °C</h1>\n\n          <div className=\"group\">\n            <img\n              src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\n              alt=\"status icon\"\n            />\n            <h1>{data.weather[0].main}</h1>\n          </div>\n\n          {/* Обновленный блок для погоды по времени с использованием слайдера */}\n          <Slider className=\"hourly-container\" {...sliderSettings}>\n            {hourlyWeather.map((hour, index) => (\n              <div key={index} className=\"hourly-item\">\n                <p>{new Date(hour.dt * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</p>\n                <img src={`http://openweathermap.org/img/wn/${hour.weather[0].icon}@2x.png`} alt=\"weather icon\" />\n                <p>{hour.main.temp.toFixed()} °C</p>\n              </div>\n            ))}\n          </Slider>\n\n          <Slide direction=\"up\" timeout={800} in={!loading}>\n            <div className=\"box_container\">\n              <div className=\"box\">\n                <p>Humidity</p>\n                <h1>{data.main.humidity.toFixed()}%</h1>\n              </div>\n\n              <div className=\"box\">\n                <p>Wind</p>\n                <h1>{data.wind.speed.toFixed()} km/h</h1>\n              </div>\n\n              <div className=\"box\">\n                <p>Feels Like</p>\n                <h1>{data.main.feels_like.toFixed()} °C</h1>\n              </div>\n            </div>\n          </Slide>\n        </>\n      ) : (\n        <CircularProgress />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","severity":1,"message":"16","line":15,"column":10,"nodeType":"17","messageId":"18","endLine":15,"endColumn":15},{"ruleId":"19","severity":1,"message":"20","line":83,"column":6,"nodeType":"21","endLine":83,"endColumn":23,"suggestions":"22"},"no-unused-vars","'isDay' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchWeatherData'. Either include it or remove the dependency array.","ArrayExpression",["23"],{"desc":"24","fix":"25"},"Update the dependencies array to be: [cityName, error, fetchWeatherData]",{"range":"26","text":"27"},[2320,2337],"[cityName, error, fetchWeatherData]"]